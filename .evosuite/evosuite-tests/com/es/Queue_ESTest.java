/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 14:59:07 GMT 2017
 */

package com.es;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.es.Person;
import com.es.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Queue_ESTest extends Queue_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("BHEs;rA*1fRB", (-1196));
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      queue0.hashCode();
  }

  @Test
  public void test01()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("", 0);
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getYounger();
      assertSame(person1, person0);
  }

  @Test
  public void test02()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("", 18);
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getYounger();
      assertSame(person1, person0);
  }

  @Test
  public void test03()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("BHEs;rA*1fRB", (-1196));
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getYounger();
      assertEquals("BHEs;rA*1fRB", person1.getName());
  }

  @Test
  public void test04()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("", 0);
      linkedList0.addFirst(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getOlder();
      assertEquals("", person1.getName());
  }

  @Test
  public void test05()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("BHEs;rA*1fRB", 0);
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getOlder();
      assertSame(person1, person0);
  }

  @Test
  public void test06()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("", 18);
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getOlder();
      assertEquals(18, person1.getAge());
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("_2yj]e@VCOMTN$F", (-776));
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person1 = queue0.getOlder();
      assertSame(person1, person0);
  }

  @Test
  public void test08()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Person person0 = new Person("", 65);
      linkedList0.add(person0);
      List<Person> list0 = queue0.getAdults();
      assertEquals(0, list0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("", 18);
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      List<Person> list0 = queue0.getAdults();
      assertEquals(0, list0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      Queue queue0 = new Queue((List<Person>) null);
      // Undeclared exception!
      try { 
        queue0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.es.Queue", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Queue queue0 = new Queue((List<Person>) null);
      // Undeclared exception!
      try { 
        queue0.getYounger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.es.Queue", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Queue queue0 = new Queue((List<Person>) null);
      // Undeclared exception!
      try { 
        queue0.getOlder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.es.Queue", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Queue queue0 = new Queue((List<Person>) null);
      // Undeclared exception!
      try { 
        queue0.getAdults();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.es.Queue", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      boolean boolean0 = queue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      Object object0 = new Object();
      boolean boolean0 = queue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("", 1098);
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      List<Person> list0 = queue0.getAdults();
      assertEquals(0, list0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      String string0 = queue0.toString();
      assertEquals("Queue{persons=[]}", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      queue0.hashCode();
  }

  @Test
  public void test19()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      // Undeclared exception!
      try { 
        queue0.getYounger();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         assertThrownBy("java.util.Optional", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) linkedList0);
      // Undeclared exception!
      try { 
        queue0.getOlder();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         assertThrownBy("java.util.Optional", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person((String) null, 31);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      linkedList0.add(person0);
      List<Person> list0 = queue0.getAdults();
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test22()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Person person0 = new Person("BHEs;rA*1fRB", (-1196));
      linkedList0.add(person0);
      Queue queue0 = new Queue((List<Person>) linkedList0);
      List<Person> list0 = queue0.getAdults();
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      Queue queue0 = new Queue((List<Person>) null);
      Queue queue1 = new Queue((List<Person>) linkedList0);
      // Undeclared exception!
      try { 
        queue0.equals(queue1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.es.Queue", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Queue queue0 = new Queue((List<Person>) null);
      boolean boolean0 = queue0.equals(queue0);
      assertTrue(boolean0);
  }
}
